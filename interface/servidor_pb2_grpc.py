# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import servidor_pb2 as servidor__pb2


class opcoesClienteStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.cadastrarCliente = channel.unary_unary(
                '/servidor.opcoesCliente/cadastrarCliente',
                request_serializer=servidor__pb2.Cliente.SerializeToString,
                response_deserializer=servidor__pb2.Resposta.FromString,
                )
        self.checarCliente = channel.unary_unary(
                '/servidor.opcoesCliente/checarCliente',
                request_serializer=servidor__pb2.Cliente.SerializeToString,
                response_deserializer=servidor__pb2.Resposta.FromString,
                )


class opcoesClienteServicer(object):
    """Missing associated documentation comment in .proto file."""

    def cadastrarCliente(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def checarCliente(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_opcoesClienteServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'cadastrarCliente': grpc.unary_unary_rpc_method_handler(
                    servicer.cadastrarCliente,
                    request_deserializer=servidor__pb2.Cliente.FromString,
                    response_serializer=servidor__pb2.Resposta.SerializeToString,
            ),
            'checarCliente': grpc.unary_unary_rpc_method_handler(
                    servicer.checarCliente,
                    request_deserializer=servidor__pb2.Cliente.FromString,
                    response_serializer=servidor__pb2.Resposta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'servidor.opcoesCliente', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class opcoesCliente(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def cadastrarCliente(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servidor.opcoesCliente/cadastrarCliente',
            servidor__pb2.Cliente.SerializeToString,
            servidor__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def checarCliente(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servidor.opcoesCliente/checarCliente',
            servidor__pb2.Cliente.SerializeToString,
            servidor__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class opcoesVoucherStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.cadastrarVoucher = channel.unary_unary(
                '/servidor.opcoesVoucher/cadastrarVoucher',
                request_serializer=servidor__pb2.Voucher.SerializeToString,
                response_deserializer=servidor__pb2.Resposta.FromString,
                )
        self.apresentarVouchersUsuario = channel.unary_unary(
                '/servidor.opcoesVoucher/apresentarVouchersUsuario',
                request_serializer=servidor__pb2.ID.SerializeToString,
                response_deserializer=servidor__pb2.Vouchers.FromString,
                )
        self.apresentarVouchers = channel.unary_unary(
                '/servidor.opcoesVoucher/apresentarVouchers',
                request_serializer=servidor__pb2.ID.SerializeToString,
                response_deserializer=servidor__pb2.Vouchers.FromString,
                )


class opcoesVoucherServicer(object):
    """Missing associated documentation comment in .proto file."""

    def cadastrarVoucher(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def apresentarVouchersUsuario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def apresentarVouchers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_opcoesVoucherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'cadastrarVoucher': grpc.unary_unary_rpc_method_handler(
                    servicer.cadastrarVoucher,
                    request_deserializer=servidor__pb2.Voucher.FromString,
                    response_serializer=servidor__pb2.Resposta.SerializeToString,
            ),
            'apresentarVouchersUsuario': grpc.unary_unary_rpc_method_handler(
                    servicer.apresentarVouchersUsuario,
                    request_deserializer=servidor__pb2.ID.FromString,
                    response_serializer=servidor__pb2.Vouchers.SerializeToString,
            ),
            'apresentarVouchers': grpc.unary_unary_rpc_method_handler(
                    servicer.apresentarVouchers,
                    request_deserializer=servidor__pb2.ID.FromString,
                    response_serializer=servidor__pb2.Vouchers.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'servidor.opcoesVoucher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class opcoesVoucher(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def cadastrarVoucher(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servidor.opcoesVoucher/cadastrarVoucher',
            servidor__pb2.Voucher.SerializeToString,
            servidor__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def apresentarVouchersUsuario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servidor.opcoesVoucher/apresentarVouchersUsuario',
            servidor__pb2.ID.SerializeToString,
            servidor__pb2.Vouchers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def apresentarVouchers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servidor.opcoesVoucher/apresentarVouchers',
            servidor__pb2.ID.SerializeToString,
            servidor__pb2.Vouchers.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class opcoesTrocaStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.apresentarTrocas = channel.unary_unary(
                '/servidor.opcoesTroca/apresentarTrocas',
                request_serializer=servidor__pb2.Troca.SerializeToString,
                response_deserializer=servidor__pb2.Trocas.FromString,
                )
        self.proporTroca = channel.unary_unary(
                '/servidor.opcoesTroca/proporTroca',
                request_serializer=servidor__pb2.Troca.SerializeToString,
                response_deserializer=servidor__pb2.Resposta.FromString,
                )
        self.realizarTroca = channel.unary_unary(
                '/servidor.opcoesTroca/realizarTroca',
                request_serializer=servidor__pb2.Troca.SerializeToString,
                response_deserializer=servidor__pb2.Resposta.FromString,
                )
        self.negarTroca = channel.unary_unary(
                '/servidor.opcoesTroca/negarTroca',
                request_serializer=servidor__pb2.Troca.SerializeToString,
                response_deserializer=servidor__pb2.Resposta.FromString,
                )


class opcoesTrocaServicer(object):
    """Missing associated documentation comment in .proto file."""

    def apresentarTrocas(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def proporTroca(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def realizarTroca(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def negarTroca(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_opcoesTrocaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'apresentarTrocas': grpc.unary_unary_rpc_method_handler(
                    servicer.apresentarTrocas,
                    request_deserializer=servidor__pb2.Troca.FromString,
                    response_serializer=servidor__pb2.Trocas.SerializeToString,
            ),
            'proporTroca': grpc.unary_unary_rpc_method_handler(
                    servicer.proporTroca,
                    request_deserializer=servidor__pb2.Troca.FromString,
                    response_serializer=servidor__pb2.Resposta.SerializeToString,
            ),
            'realizarTroca': grpc.unary_unary_rpc_method_handler(
                    servicer.realizarTroca,
                    request_deserializer=servidor__pb2.Troca.FromString,
                    response_serializer=servidor__pb2.Resposta.SerializeToString,
            ),
            'negarTroca': grpc.unary_unary_rpc_method_handler(
                    servicer.negarTroca,
                    request_deserializer=servidor__pb2.Troca.FromString,
                    response_serializer=servidor__pb2.Resposta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'servidor.opcoesTroca', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class opcoesTroca(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def apresentarTrocas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servidor.opcoesTroca/apresentarTrocas',
            servidor__pb2.Troca.SerializeToString,
            servidor__pb2.Trocas.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def proporTroca(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servidor.opcoesTroca/proporTroca',
            servidor__pb2.Troca.SerializeToString,
            servidor__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def realizarTroca(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servidor.opcoesTroca/realizarTroca',
            servidor__pb2.Troca.SerializeToString,
            servidor__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def negarTroca(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/servidor.opcoesTroca/negarTroca',
            servidor__pb2.Troca.SerializeToString,
            servidor__pb2.Resposta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
